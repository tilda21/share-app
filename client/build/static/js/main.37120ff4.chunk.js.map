{"version":3,"sources":["components/Input.js","components/ListNewInfo.js","components/NewInfo.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","information","addNewInfo","task","length","axios","post","then","res","data","props","getNewInfos","setState","catch","err","console","log","handleChange","e","stateValue","target","id","value","this","className","type","onChange","onClick","Component","ListNewInfo","newInfos","deleteNewInfo","map","newInfo","key","_id","href","rel","NewInfo","get","delete","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.37120ff4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nclass Input extends Component {\n\n  state = {\n    information: \"\"\n  }\n\n  addNewInfo = () => {\n    const task = {\n      information: this.state.information\n    }\n    \n    if(task.information && task.information.length > 0){\n      axios.post('/api/newInfos', task)\n        .then(res => {\n          if(res.data){\n            this.props.getNewInfos();\n            this.setState({information: \"\"})\n          }\n        })\n        .catch(err => console.log(err))\n    }else {\n      console.log('input field required')\n    }\n  }\n\n  handleChange = (e) => {\n    //console.log(e.target.id)\n    let stateValue = e.target.id;\n    this.setState({\n      [stateValue]: e.target.value\n    })\n  }\n\n  render() {\n    let { information } = this.state;\n    return (\n      <div id='inputs'>\n        <div className='bigWidth'>\n          <input id=\"information\" type=\"text\" onChange={this.handleChange} value={information} />\n        </div>\n        <div className='smallWidth'>\n          <button onClick={this.addNewInfo}>Adicionar</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Input;","import React from 'react';\n\nconst ListNewInfo = ({ newInfos, deleteNewInfo }) => {\n\n  return (\n    <ul>\n      <li id='title'><div>Informações</div></li>\n      {\n        newInfos &&\n          newInfos.length > 0 ?\n            (\n              newInfos.map(newInfo => {\n                return (\n                  <li key={newInfo._id}>\n                    <div className='bigWidth'><a href={newInfo.information} target=\"_blank\" rel=\"noopener noreferrer\">{newInfo.information}</a></div>\n                    <div className='smallWidth'>\n                      <button className='delete' onClick={() => deleteNewInfo(newInfo._id)}>Delete</button>\n                    </div>\n                  </li>\n                )\n              })\n            )\n            :\n            (\n              <li><div>Nada partilhado</div></li>\n            )\n      }\n    </ul>\n  )\n}\n\nexport default ListNewInfo;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport Input from './Input';\nimport ListNewInfo from './ListNewInfo';\n\nclass NewInfo extends Component {\n\n  state = {\n    newInfos: []\n  }\n\n  componentDidMount(){\n    this.getNewInfos();\n  }\n\n  getNewInfos = () => {\n    axios.get('/api/newInfos')\n      .then(res => {\n        if(res.data){\n          this.setState({\n            newInfos: res.data\n          })\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  deleteNewInfo = (id) => {\n    axios.delete(`/api/newInfos/${id}`)\n      .then(res => {\n        if(res.data){\n          this.getNewInfos()\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    let { newInfos } = this.state;\n    //console.log(newInfos);\n    return(\n      <div>\n        <h1>Informação Partilhada</h1>\n        <Input getNewInfos={this.getNewInfos}/>\n        <ListNewInfo newInfos={newInfos} deleteNewInfo={this.deleteNewInfo}/>\n      </div>\n    )\n  }\n}\n\nexport default NewInfo;","import React from 'react';\n\nimport NewInfo from './components/NewInfo';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <NewInfo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}